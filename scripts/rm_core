# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright Â© 2008-2018 ANSSI. All Rights Reserved.
# Debootstrap script for RM core packages
# Copyright 2006-2009 SGDN/DCSSI
# Copyright 2009-2014 SGDSN/ANSSI
# Author: Vincent Strubel <clipos@ssi.gouv.fr>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation.

mirror_style main
download_style apt
info INSTCORE "export TARGET, pwd $(pwd)"
export TARGET="${TARGET}/update"
ROOT="${TARGET%/?*}"
export CHROOT_CMD="${CHROOT_CMD}/update"

export BOOTSTRAP_NOVERIEXEC="indeed"

source /usr/lib/debootstrap/scripts/clip_common

declare -a BIND_MOUNTS=(
	"${ROOT}/update_priv/var ${TARGET}/var"
	"${ROOT}/update_priv/usr_local ${TARGET}/usr/local"
	"${ROOT}/update_priv/user_root ${TARGET}/user_root"
	"${ROOT}/update_priv/audit_root ${TARGET}/audit_root"
	"${ROOT}/admin_priv/etc.admin ${TARGET}/etc/admin"
	"${ROOT}/../../etc/core ${TARGET}/etc/core"
	"/proc ${TARGET}/proc"
)

do_umounts() {
	rm "${TARGET}/dev/null" "${TARGET}/dev/random" "${TARGET}/dev/urandom"

	local idx=$(( ${#BIND_MOUNTS[*]} - 1 ))
	local mnt

	for (( i=$idx; i >=0; i-- )); do
		mnt="${BIND_MOUNTS[$i]}"
		mnt="${mnt#* }"
		umount "${mnt}"
	done
	umount "${TARGET}/tmp"
	umount "${TARGET}"
}


do_mounts () {
	info INSTCORE "Mounting /update tree"
	mkdir -p "${TARGET}"
	mkdir -p "${ROOT}"/update_root/tmp
	mkdir -p "${ROOT}"/update_priv/{var,usr_local,user_root,audit_root}

	mount --bind "${ROOT}/update_root" "${TARGET}"
	mount -t tmpfs -o noexec,nodev,nosuid,mode=1777 "coretmp" "${TARGET}/tmp" 
	for line in "${BIND_MOUNTS[@]}"; do
		mkdir -p "${line#* }"
		mount --bind ${line}
	done
	
	# Needed for openssh...
	mkdir -p "${TARGET}/dev" 
	mknod "${TARGET}/dev/null" c 1 3
	mknod "${TARGET}/dev/random" c 1 8
	mknod "${TARGET}/dev/urandom" c 1 9

	mv "${ROOT}/debootstrap" "${TARGET}/debootstrap"

	on_exit "do_umounts"
}

do_mounts

work_out_debs () {

    work_out_confdebs
    core="glibc dpkg tar ncurses zlib bzip2 busybox-update baselayout-update" 
    core="$core perl timedate"
    core="$core gcc-lib xz-utils-core"
}

first_stage_install () {
    local admindir="${TARGET}/var/pkg/lib/dpkg"

    mkdir -p "${admindir}"
    : >"${admindir}/status"
    : >"${admindir}/available"

    p () {
	baseprog="$(($baseprog + ${1:-1}))"
    }

    local arch="$(dpkg --print-architecture)"

    x_feign_install () {
        local pkg="$1"
        local deb="$(debfor $pkg)"
        local ver="$(extract_deb_field "$TARGET/$deb" Version)"

        mkdir -p "${admindir}/info"

        echo \
"Package: $pkg
Version: $ver
Maintainer: unknown
Description: fake install
Architecture: ${arch}
Status: install ok installed

" >> "${admindir}/status"

        touch "${admindir}/info/${pkg}.list"
    }

    extract ${core}
    for _pkg in ${core}; do
        x_feign_install $_pkg
    done
}

second_stage_install () {
    x_core_install () {
	smallyes '' | in_target dpkg --force-depends --install $(debfor "$@") 2>>"${DPKG_ERR_FILE}"
    }

    baseprog=0
    bases=40

    info INSTCORE "Installing core packages..."

    x_core_install ${core} 2>/dev/null

    info UNPACKBASE "Unpacking packages..."
    exec 7>&1

    smallyes '' | 
    	(repeatn 5 in_target_failmsg UNPACK_REQ_FAIL_FIVE "Failure while unpacking packages. This will be attempted 5 times." "" \
	 dpkg --status-fd 8 --force-depends --unpack $(debfor $all_debs) 8>&1 1>&7 2>>"${DPKG_ERR_FILE}" || echo EXITCODE $?) |
	 dpkg_progress $baseprog $bases UNPACKBASE "Unpacking base system" UNPACKING

    info CONFBASE "Configuring packages..."

    smallyes '' | 
    	(repeatn 5 in_target_failmsg CONF_REQ_FAIL "Failure while configuring required packages. This will be attempted 5 times." "" \
	 dpkg --status-fd 8 --configure --pending --force-configure-any 8>&1 1>&7 2>>"${DPKG_ERR_FILE}" || echo EXITCODE $?) |
	 dpkg_progress $baseprog $bases CONFBASE "Configuring base system" CONFIGURING

    info BASESUCCESS "Base system installed successfully."
}
